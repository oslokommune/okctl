
How to do upgrade - long version

USE DOMAIN DRIVEN DESIGN FOR MIGRATION CALCULATION LOGIC

# Case: Bruker laster ned 0.0.61, applyer cluster. Laster ned 0.0.63, kjører upgrade cluster. Laster ned 0.0.64, kjørere upgrade cluster. Algoritme under beskriver siste kjøring av upgrade.

- [API-call] get all releases from okctl-upgrade repo. ->
{
    "tag_name": "1-0.0.63",
    "assets": [
        "browser_download_url":  "https://github.com/oslokommune/okctl-upgrade/releases/download/1_0.0.64/okctl-upgrade-1-0.0.63"
    ],
    "body" // TODO nice to have, add later
}

- Fjern de som ikke har asset.state == "uploaded"
    - Kast error dersom fil ikke finnes? Tjaa. Test hva som skjer dersom fil ikke finnes.

- Parse into struct
Migration {
    Index           int,
    Filename        string,
    Version         SemverVersion

}
    ->
        1-0.0.61
        2-0.0.62
        3-0.0.62
        4-0.0.63
        5-0.0.63
        6-0.0.64
        7-0.0.65

        Betydning: x-<okctl version> - Migrasjon som kjøres for å komme seg til <okctl version>. Så for å komme seg til
            versjon 0.0.62, må man kjøre 1-0.0.61 og 2-0.0.62.

- [okctl-call]
    get current okctl version - 0.0.64

- Remove migrations that are earlier than than or equal to original cluster version
    [state-call] find original cluster version - 0.0.61

    Result:
        2-0.0.62
        3-0.0.62
        4-0.0.63
        5-0.0.63
        6-0.0.64
        7-0.0.65

    Gammelt
    - [state-call] find already applied migrations (from state.db)
        # won't work: hvis man laster ned 0.0.60, apply cluster, laster ned 0.0.65, upgrade cluster.
        # Da vil algoritmen tro at clusteret er lagd med 0.0.65.
        # Løsning 1: Ved apply cluster må man lagre i state.db hvilken versjon clusteret ble lagd med. Putt i reconciler?
            Kun kjøres ved første gangs apply cluster. Alle ganger senere er det unødvendig. Ok trenger vel da ikke puttes
            i reconciler.
            Velger denne løsningen.
        # Løsning 2: Ved apply cluster, putt alle eksisterende upgrades i migrations table. Efh komplisert.
        # ---
        if empty
            add all migrations up to and including current okctl versions to migrations table:
                1-0.0.61 (applied_at: nil, comment: Doesn't need to be run, cluster is newer.)
                2-0.0.62
                3-0.0.62

                hmmm tenk på annen implementasjon her

- Remove already applied migrations (from state.db)
    [state-call] Applied migrations:
        2-0.0.62
        3-0.0.62
        4-0.0.63
        5-0.0.63

    Result:
        6-0.0.64
        7-0.0.65

- Remove too new migrations (semver compare)
        7-0.0.65

    Result:
        6-0.0.64

- [okctl-call binaries-provider] Download migration binaries for migrations to run
        okctl-upgrade_6-0.0.64_linux_amd64

- Verify checksum

- [shell-call] run resulting migrations

    - If exit code 0, update migration state: Ran OK.
    - If exit code > 0, update migration state: Ran not-OK.
        Write result to state. MigrationResult struct or something.




-----------------------------------------------------------------

How to require a specific version:
- Feks: okctl 0.64: apply cluster: sjekkom migration state indexOfLatestAppliedMigration >= 5.
    If OK, continue apply cluster.
    If not OK, write error message:
        Some okctl resources are out of date. You need to:
            upgrade your okctl resources by running 'okctl upgrade'. To see what this will do, run
            'okctl upgrade --dry-run'.

            Or, if you don't want to upgrade at this time, download a previous version of okctl and try again.

        Technical details:
            apply cluster requires minimum migration version: 5-0.0.63 [or just 5]
*/

