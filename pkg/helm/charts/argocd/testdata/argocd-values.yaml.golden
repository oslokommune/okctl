installCRDs: false
global:
    image:
        repository: argoproj/argocd
        tag: v1.7.2
        imagePullPolicy: IfNotPresent
    securityContext:
        runAsNonRoot: true
        runAsGroup: 999
        runAsUser: 999
        fsGroup: 999
controller:
    name: application-controller
    args:
        statusProcessors: "20"
        operationProcessors: "10"
        appResyncPeriod: "180"
    logLevel: info
    containerPort: 8082
    readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    service:
        port: 8082
        portName: https-controller
    resources:
        limits:
            cpu: 500m
            memory: 512Mi
        requests:
            cpu: 250m
            memory: 256Mi
    serviceAccount:
        create: true
        name: argocd-application-controller
    clusterAdminAccess:
        enabled: true
dex:
    enabled: true
    name: dex-server
    image:
        repository: quay.io/dexidp/dex
        tag: v2.22.0
        imagePullPolicy: IfNotPresent
    serviceAccount:
        create: true
        name: argocd-dex-server
    volumeMounts:
        - name: static-files
          mountPath: /shared
    volumes:
        - name: static-files
          emptyDir: {}
    containerPortHttp: 5556
    servicePortHttp: 5556
    containerPortGrpc: 5557
    servicePortGrpc: 5557
    resources:
        limits:
            cpu: 50m
            memory: 64Mi
        requests:
            cpu: 10m
            memory: 32Mi
redis:
    enabled: true
    name: redis
    containerPort: 6379
    servicePort: 6379
    image:
        repository: redis
        tag: 5.0.8
        imagePullPolicy: IfNotPresent
    securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 1000
        fsGroup: 1000
    resources:
        limits:
            cpu: 200m
            memory: 128Mi
        requests:
            cpu: 100m
            memory: 64Mi
server:
    name: server
    replicas: 1
    autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
    extraArgs:
        - --insecure
    logLevel: info
    containerPort: 8080
    readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    resources:
        limits:
            cpu: 100m
            memory: 128Mi
        requests:
            cpu: 50m
            memory: 64Mi
    certificate:
        enabled: false
    service:
        annotations: {}
        labels: {}
        type: NodePort
        servicePortHttp: 80
        servicePortHttps: 443
        servicePortHttpName: http
        servicePortHttpsName: https
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
    metrics:
        enabled: false
    serviceAccount:
        create: true
        name: argocd-server
    ingress:
        enabled: true
        annotations:
            alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type":"redirect","RedirectConfig":{"Protocol":"HTTPS","Port":"443","StatusCode":"HTTP_301"}}'
            alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:eu-west-1:123456789012/certificate/12345abc
            alb.ingress.kubernetes.io/healthcheck-path: /healthz
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/target-type: instance
            kubernetes.io/ingress.class: alb
        labels: {}
        hosts:
            - argocd.test.oslo.systems
        paths:
            - /*
        extraPaths:
            - path: /*
              backend:
                serviceName: ssl-redirect
                servicePort: use-annotation
        https: false
    ingressGrpc:
        enabled: false
    route:
        enabled: false
    config:
        url: https://argocd.test.oslo.systems
        users.anonymous.enabled: "false"
        dex.config: |
            connectors:
            - type: oidc
              id: cognito
              name: AWS Cognito
              config:
                issuer: https://cognito-idp..amazonaws.com/VBNJ6723FAKE
                clientID: client12345
                clientSecret: $dex.cognito.clientSecret
                redirectURI: https://argocd.test.oslo.systems/api/dex/callback
                scopes:
                - openid
                - email
                - profile
        repositories: |
            - url: git@github.com:oslokommune/test.git
              type: git
              name: test
              sshPrivateKeySecret:
                name: argocd-test-oslokommune-private-key
                key: ssh-private-key
        admin.enabled: "false"
    rbacConfig:
        policy.default: role:admin
        scopes: '[email]'
    clusterAdminAccess:
        enabled: true
repoServer:
    name: repo-server
    replicas: 1
    autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
    logLevel: info
    containerPort: 8081
    readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
    resources:
        limits:
            cpu: 50m
            memory: 128Mi
        requests:
            cpu: 10m
            memory: 64Mi
    service:
        port: 8081
        portName: https-repo-server
    metrics:
        enabled: false
    serviceAccount:
        create: false
        name: ""
configs:
    knownHosts.data.ssh_known_hosts: |
        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    secret.createSecret: false
